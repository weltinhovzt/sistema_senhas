/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package senha.view.desktop;

import java.util.ArrayList;
import java.util.List;
import senha.model.SenhaAtendimento;
import senha.control.SenhaAtendimentoDAO;
import senha.model.SenhaCaixa;
import senha.control.SenhaCaixaDAO;
import senha.model.SenhaGerencia;
import senha.control.SenhaGerenciaDAO;
import senha.model.Usuario;
import senha.control.UsuarioDAO;
import senha.model.Setor;
import senha.model.SiglaSetor;
import senha.model.StatusSenha;
import senha.model.Util;
import javax.swing.JOptionPane;
import org.jnativehook.GlobalScreen;
import org.jnativehook.NativeHookException;
import org.jnativehook.keyboard.NativeKeyEvent;
import org.jnativehook.keyboard.NativeKeyListener;
import senha.control.TimeBool;
import senha.model.Bool;

/**
 *
 * @author welti_000
 */
public class TelaChamarSenha extends javax.swing.JFrame {

    boolean temCliente;
    private Bool bool;
    CapturaTeclado capturaTeclado;
    List<Usuario> listaUsuario;
    public Usuario usuarioLogado;
    int guiche;
    String setor;
    SenhaCaixa senhaCaixaNormal = new SenhaCaixa();

    /**
     * Creates new form TelaChamarSenha
     */
    public TelaChamarSenha() {
        initComponents();
        initCampos();
        registrarCapturaTeclado();

    }

    public TelaChamarSenha(Usuario usuarioLogado) {
        initComponents();
        initCampos();
        listaUsuario = new ArrayList<>();
        this.usuarioLogado = usuarioLogado;
        passarParametros();
        registrarCapturaTeclado();

    }

    private void initCampos() {
        bool = new Bool(true);
        capturaTeclado = new CapturaTeclado();
    }

    private void registrarCapturaTeclado() {
        try {
            GlobalScreen.registerNativeHook();
        } catch (NativeHookException e) {
            System.err.println("Problemas!!");
            System.exit(1);
        }
        GlobalScreen.addNativeKeyListener(new CapturaTeclado());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLUsuario = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLSetor = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jlGuiche = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jCChamarPreferencial = new javax.swing.JCheckBox();
        jLSenha = new javax.swing.JLabel();
        jBChamarSenha = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(476, 318));
        setResizable(false);
        getContentPane().setLayout(null);

        jLUsuario.setText("wellingtonh3181_00");
        getContentPane().add(jLUsuario);
        jLUsuario.setBounds(310, 270, 150, 17);

        jLabel6.setText("Usuario:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(260, 270, 50, 17);

        jLSetor.setText("Atendimento");
        getContentPane().add(jLSetor);
        jLSetor.setBounds(150, 270, 110, 17);

        jLabel4.setText("Setor: ");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(110, 270, 80, 17);

        jlGuiche.setText("01");
        getContentPane().add(jlGuiche);
        jlGuiche.setBounds(60, 270, 40, 17);

        jLabel1.setText("Guiche:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 270, 60, 17);

        jCChamarPreferencial.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCChamarPreferencial.setForeground(new java.awt.Color(255, 255, 255));
        jCChamarPreferencial.setText("Chamar senha preferencial");
        jCChamarPreferencial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCChamarPreferencialActionPerformed(evt);
            }
        });
        getContentPane().add(jCChamarPreferencial);
        jCChamarPreferencial.setBounds(20, 160, 220, 24);

        jLSenha.setFont(new java.awt.Font("Arial", 0, 30)); // NOI18N
        jLSenha.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLSenha.setText("senha");
        getContentPane().add(jLSenha);
        jLSenha.setBounds(330, 90, 110, 80);

        jBChamarSenha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/senha/img/btChamarSenha.png"))); // NOI18N
        jBChamarSenha.setBorderPainted(false);
        jBChamarSenha.setContentAreaFilled(false);
        jBChamarSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBChamarSenhaActionPerformed(evt);
            }
        });
        getContentPane().add(jBChamarSenha);
        jBChamarSenha.setBounds(20, 200, 210, 50);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/senha/img/telaChamarSenha.png"))); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 477, 290);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jCChamarPreferencialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCChamarPreferencialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCChamarPreferencialActionPerformed

    private void jBChamarSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBChamarSenhaActionPerformed
        // TODO add your handling code here:

        this.chamarSenha();

    }//GEN-LAST:event_jBChamarSenhaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaChamarSenha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new TelaChamarSenha().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBChamarSenha;
    private javax.swing.JCheckBox jCChamarPreferencial;
    private javax.swing.JLabel jLSenha;
    private javax.swing.JLabel jLSetor;
    private javax.swing.JLabel jLUsuario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jlGuiche;
    // End of variables declaration//GEN-END:variables

    public void chamarSenhaCaixa() {
        SenhaCaixaDAO dao = new SenhaCaixaDAO();
        SenhaCaixa senhaCaixa;
        if (jCChamarPreferencial.isSelected() == true) {
            senhaCaixa = dao.menorSenhaCaixaPreferencial();

            if (senhaCaixa == null) {
                senhaCaixa = dao.menorSenhaCaixaNormal();
                if (senhaCaixa == null) {
                    JOptionPane.showMessageDialog(null, "Fila esta vazia!!");
                    temCliente = false;
                } else {
                    senhaCaixa.setStatusSenha(StatusSenha.CHAMADO);
                    senhaCaixa.setGuiche(guiche);
                    dao.updateStatusSenhaCaixa(senhaCaixa);
                    jLSenha.setText(SiglaSetor.CC + Util.formatarSenha(senhaCaixa.getNumeroSenha()));
                    temCliente = true;
                }
            } else {
                senhaCaixa.setStatusSenha(StatusSenha.CHAMADO);
                senhaCaixa.setGuiche(guiche);
                dao.updateStatusSenhaCaixa(senhaCaixa);
                jLSenha.setText(SiglaSetor.CP + Util.formatarSenha(senhaCaixa.getNumeroSenha()));
                temCliente = true;
            }

        } else {
            senhaCaixa = dao.menorSenhaCaixaNormal();

            if (senhaCaixa == null) {
                senhaCaixa = dao.menorSenhaCaixaPreferencial();
                if (senhaCaixa == null) {
                    JOptionPane.showMessageDialog(null, "Fila esta vazia!!");
                    temCliente = false;
                } else {
                    senhaCaixa.setStatusSenha(StatusSenha.CHAMADO);
                    senhaCaixa.setGuiche(guiche);
                    dao.updateStatusSenhaCaixa(senhaCaixa);
                    jLSenha.setText(SiglaSetor.CP + Util.formatarSenha(senhaCaixa.getNumeroSenha()));
                    temCliente = true;
                }
            } else {
                senhaCaixa.setStatusSenha(StatusSenha.CHAMADO);
                senhaCaixa.setGuiche(guiche);
                dao.updateStatusSenhaCaixa(senhaCaixa);
                jLSenha.setText(SiglaSetor.CC + Util.formatarSenha(senhaCaixa.getNumeroSenha()));
                temCliente = true;
            }

        }
    }

    public void chamarSenhaAtendimento() {
        SenhaAtendimentoDAO dao = new SenhaAtendimentoDAO();
        SenhaAtendimento senhaAtendimento;

        if (jCChamarPreferencial.isSelected() == true) {
            senhaAtendimento = dao.menorSenhaAtendimentoPreferencial();
            if (senhaAtendimento == null) {
                senhaAtendimento = dao.menorSenhaAtendimentoNormal();
                if (senhaAtendimento == null) {
                    JOptionPane.showMessageDialog(null, "Fila esta vazia!!");
                    temCliente = false;
                } else {
                    senhaAtendimento.setStatusSenha(StatusSenha.CHAMADO);
                    senhaAtendimento.setGuiche(guiche);
                    dao.updateStatusSenhaAtendimento(senhaAtendimento);
                    jLSenha.setText(SiglaSetor.AC + Util.formatarSenha(senhaAtendimento.getNumeroSenha()));
                    temCliente = true;
                }
            } else {
                senhaAtendimento.setStatusSenha(StatusSenha.CHAMADO);
                senhaAtendimento.setGuiche(guiche);
                dao.updateStatusSenhaAtendimento(senhaAtendimento);
                jLSenha.setText(SiglaSetor.AP + Util.formatarSenha(senhaAtendimento.getNumeroSenha()));
                temCliente = true;
            }

        } else {
            senhaAtendimento = dao.menorSenhaAtendimentoNormal();

            if (senhaAtendimento == null) {
                senhaAtendimento = dao.menorSenhaAtendimentoPreferencial();
                if (senhaAtendimento == null) {
                    JOptionPane.showMessageDialog(null, "Fila esta vazia!!");
                    temCliente = false;
                } else {
                    senhaAtendimento.setStatusSenha(StatusSenha.CHAMADO);
                    senhaAtendimento.setGuiche(guiche);
                    dao.updateStatusSenhaAtendimento(senhaAtendimento);
                    jLSenha.setText(SiglaSetor.AP + Util.formatarSenha(senhaAtendimento.getNumeroSenha()));
                    temCliente = true;
                }
            } else {
                senhaAtendimento.setStatusSenha(StatusSenha.CHAMADO);
                senhaAtendimento.setGuiche(guiche);
                dao.updateStatusSenhaAtendimento(senhaAtendimento);
                jLSenha.setText(SiglaSetor.AC + Util.formatarSenha(senhaAtendimento.getNumeroSenha()));
                temCliente = true;
            }

        }
    }

    public void chamarSenhaGerencia() {
        SenhaGerenciaDAO dao = new SenhaGerenciaDAO();
        SenhaGerencia senhaGerencia;
        if (jCChamarPreferencial.isSelected() == true) {
            senhaGerencia = dao.menorSenhaGerenciaPreferencial();

            if (senhaGerencia == null) {
                senhaGerencia = dao.menorSenhaGerenciaNormal();
                if (senhaGerencia == null) {
                    JOptionPane.showMessageDialog(null, "Fila esta vazia!!");
                    temCliente = false;
                } else {
                    senhaGerencia.setStatusSenha(StatusSenha.CHAMADO);
                    senhaGerencia.setGuiche(guiche);
                    dao.updateStatusSenhaGerencia(senhaGerencia);
                    jLSenha.setText(SiglaSetor.GC + Util.formatarSenha(senhaGerencia.getNumeroSenha()));
                    temCliente = true;
                }
            } else {
                senhaGerencia.setStatusSenha(StatusSenha.CHAMADO);
                senhaGerencia.setGuiche(guiche);
                dao.updateStatusSenhaGerencia(senhaGerencia);
                jLSenha.setText(SiglaSetor.GP + Util.formatarSenha(senhaGerencia.getNumeroSenha()));
                temCliente = true;
            }

        } else {
            senhaGerencia = dao.menorSenhaGerenciaNormal();

            if (senhaGerencia == null) {
                senhaGerencia = dao.menorSenhaGerenciaPreferencial();
                if (senhaGerencia == null) {
                    JOptionPane.showMessageDialog(null, "Fila esta vazia!!");
                    temCliente = false;
                } else {
                    senhaGerencia.setStatusSenha(StatusSenha.CHAMADO);
                    senhaGerencia.setGuiche(guiche);
                    dao.updateStatusSenhaGerencia(senhaGerencia);
                    jLSenha.setText(SiglaSetor.GP + Util.formatarSenha(senhaGerencia.getNumeroSenha()));
                    temCliente = true;
                }
            } else {
                senhaGerencia.setStatusSenha(StatusSenha.CHAMADO);
                senhaGerencia.setGuiche(guiche);
                dao.updateStatusSenhaGerencia(senhaGerencia);
                jLSenha.setText(SiglaSetor.GC + Util.formatarSenha(senhaGerencia.getNumeroSenha()));
                temCliente = true;
            }

        }
    }

    private void passarParametros() {
        UsuarioDAO dao = new UsuarioDAO();
        List<Usuario> data = dao.selectUsuarios();
        listaUsuario = data;
        data.stream().filter((usuario) -> (usuarioLogado.getNomeUsuario().equals(usuario.getNomeUsuario()))).map((usuario) -> {
            setor = usuario.getSetor();
            return usuario;
        }).map((usuario) -> {
            guiche = usuario.getGuiche();
            return usuario;
        }).map((_item) -> {
            jlGuiche.setText(String.valueOf(guiche));
            return _item;
        }).map((_item) -> {
            jLSetor.setText(setor);
            return _item;
        }).forEach((_item) -> {
            jLUsuario.setText(usuarioLogado.getNomeUsuario());
        });

    }

    public void chamarSenha() {
        if (bool.getBool()) {
            bool.setBool(false);
            TimeBool.notBooleanInTime(bool, 3f);
        } else {
            JOptionPane.showMessageDialog(this, "Aguarde!!!");
            return;
        }

        switch (setor) {
            case Setor.ATENDIMENTO:
                chamarSenhaAtendimento();
                break;
            case Setor.CAIXA:
                chamarSenhaCaixa();
                break;
            default:
                chamarSenhaGerencia();
                break;
        }
    }

    public class CapturaTeclado implements NativeKeyListener {
        private final int MAX_PRESS = 1;
        private long press;
        private int keyEventCode;
        private static final int ASPAS = 41;
        private static final int CONTROL = 29;

        public CapturaTeclado() {

        }

        @Override
        public void nativeKeyPressed(NativeKeyEvent arg0) {
            if (arg0.getKeyCode() == NativeKeyEvent.VC_CONTROL_L) {
                keyEventCode = arg0.getKeyCode();

            } else if (arg0.getKeyCode() == ASPAS && keyEventCode == CONTROL && press < MAX_PRESS ) {
                chamarSenha();
                press++;
                if (temCliente) {
                    TelaMostrarSenha tela = new TelaMostrarSenha();
                    tela.initFrame(jLSenha.getText());
                    tela.setVisible(true);
                }

            }

        }

        @Override
        public void nativeKeyReleased(NativeKeyEvent arg0) {
            if (arg0.getKeyCode() == NativeKeyEvent.VC_CONTROL_L) {
                keyEventCode = -1;
                press = 0;
            }
        }

        @Override
        public void nativeKeyTyped(NativeKeyEvent arg0) {

        }

    }

}
